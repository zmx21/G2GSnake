configfile: "../config/config.yaml"
container: "docker://zmxu/g2gpipeline"

import pandas as pd
import os
import glob

if config["genes"] == '':
  directory = config["pathogen_tbl_dir"]
  files = glob.glob(os.path.join(directory, '*.info'))
  genes_to_run = [os.path.splitext(file)[0].split('/')[-1] for file in files]
  
else:
  genes_to_run=config["genes"].split(',')

rule all:
    input:
        #expand("results/{gene}/tmp/fit_bin_l1_pred.list",gene=genes_to_run)
        #expand("results/{gene}/log.out",gene=genes_to_run)
        "results/G2G_Results.bmat"
        
rule summarize:
    input:
        tbl=expand("results/{gene}/log.out",gene=genes_to_run),
        host_variants='results/tmp/G2G_QC.variants',
        host_info='results/tmp/G2G_QC.info'
    output:
        "results/G2G_Results.bmat"
    threads: 1
    shell:
        "Rscript ./scripts/Summarize_G2G.R {input.tbl} {input.host_variants} {output}"

if config["pathogen_input"] == 'fasta':
    print('Pathogen FASTA input')
    #Write out Tree path
    tree_file = open("results/tree_path.txt","w")
    tree_file.write(config["nw_file"]+'\n') 
    tree_file.close()

    rule expand_fasta:
        input:
            seq=config["pathogen_fasta"],
            ref=config["pathogen_ref"],
            gff=config["pathogen_gff"]
        output:
            "results/tmp/pathogen.expanded.fasta"
        threads: 20
        shell:
            """
            Rscript ./scripts/Expand_FASTA.R {input.seq} {output} {threads}
            """
            
    rule nextalign:
        input:
            fasta="results/tmp/pathogen.expanded.fasta",
            ref=config["pathogen_ref"],
            gff=config["pathogen_gff"]
        output:
            expand("results/FASTA_AA/pathogen.expanded.gene.{gene}.fasta",gene=genes_to_run)
        threads: 1
        shell:
            """
                nextalign --sequences=results/tmp/pathogen.expanded.fasta \
                --reference={input.ref} \
                --genemap={input.gff} \
                --genes {config[genes]} \
                --output-dir=results/FASTA_AA/ 2> results/FASTA_AA/nextalign.log
            """

    rule make_aa_tbl:
        input:
            fasta="results/FASTA_AA/pathogen.expanded.gene.{gene}.fasta",
            covar=config["covar_file"]
        output:
            tbl=config["pathogen_tbl_dir"]+"{gene}.txt",
            info=config["pathogen_tbl_dir"]+"{gene}.info"
        threads: 1
        shell:
            """
                Rscript ./scripts/FASTA_to_Tbl.R {input.fasta} {input.covar} {output.tbl} {output.info}
            """
            
elif config["pathogen_input"] == 'aa_tbl': 
        import os.path

        print('Pathogen AA Table Input')
        for gene in genes_to_run:
            cur_path=config["pathogen_tbl_dir"]+gene+".txt"
            if not os.path.isfile(cur_path):
                 print('Invalid Arugment: pathogen_tbl_dir')
                 sys.exit()
else:
    print('Invalid Arugment: pathogen_input. Please specify type of pathogen file input (fasta or aa_tbl)')
    sys.exit()


if config["excl_chr6"] is True:
    rule host_QC_no_chr6:
        input:
            vcf=config["host_VCF"],
            covar_file=config["covar_file"]
        output:
            bed="results/tmp/G2G_QC.bed",
            bim="results/tmp/G2G_QC.bim",
            fam="results/tmp/G2G_QC.fam",
            bed_PCA="results/tmp/G2G_QC_PCA.bed",
            bim_PCA="results/tmp/G2G_QC_PCA.bim",
            fam_PCA="results/tmp/G2G_QC_PCA.fam",
            vcf='results/tmp/G2G_QC.vcf.gz',
            variants='results/tmp/G2G_QC.variants',
            info='results/tmp/G2G_QC.info'
        params:
            MAF=config["host_MAF"],
            missing=config["host_missing"],
            HWE=config["host_HWE"],
            excl_chr6=bool(config["excl_chr6"])
        shell:
            """
                cd /home/
                ./plink2 --vcf {input.vcf} --maf {params.MAF} \
                --not-chr 6 --geno {params.missing} --mind {params.missing} --hwe {params.HWE} \
                --make-bed --out results/tmp/G2G_QC_PCA_tmp --threads {threads}
                
                ./plink2 --bfile results/tmp/G2G_QC_PCA_tmp --indep-pairwise 200 100 0.2 \
                --make-bed --out results/tmp/G2G_QC_PCA_tmp
                ./plink2 --bfile results/tmp/G2G_QC_PCA_tmp --extract results/tmp/G2G_QC_PCA_tmp.prune.in \
                --make-bed --out results/tmp/G2G_QC_PCA

                
                ./plink2 --vcf {input.vcf} --maf {params.MAF} \
                --geno {params.missing} --mind {params.missing} --hwe {params.HWE} \
                --make-bed --out results/tmp/G2G_QC --threads {threads}

                
                ./plink2 --vcf {input.vcf} --maf {params.MAF} \
                --geno {params.missing} --mind {params.missing} --hwe {params.HWE} \
                --export vcf bgz --out results/tmp/G2G_QC --threads {threads}

                bcftools index --threads {threads} results/tmp/G2G_QC.vcf.gz
                bcftools query -f '%ID\n' results/tmp/G2G_QC.vcf.gz > results/tmp/G2G_QC.variants
                bcftools query -f '%ID %CHROM %POS\n' results/tmp/G2G_QC.vcf.gz > results/tmp/G2G_QC.info

	        """
elif config["excl_chr6"] is False:
    rule host_QC:
        input:
            vcf=config["host_VCF"],
            covar_file=config["covar_file"]
        output:
            bed="results/tmp/G2G_QC.bed",
            bim="results/tmp/G2G_QC.bim",
            fam="results/tmp/G2G_QC.fam",
            vcf='results/tmp/G2G_QC.vcf.gz',
            variants='results/tmp/G2G_QC.variants',
            info='results/tmp/G2G_QC.info'
        params:
            MAF=config["host_MAF"],
            missing=config["host_missing"],
            HWE=config["host_HWE"],
            excl_chr6=bool(config["excl_chr6"])
        shell:
            """
                cd /home/
                ./plink2 --vcf {input.vcf} --maf {params.MAF} \
                --geno {params.missing} --mind {params.missing} --hwe {params.HWE} \
                --make-bed --out results/tmp/G2G_QC_PCA_tmp --threads {threads}
                
                ./plink2 --bfile results/tmp/G2G_QC_PCA_tmp --indep-pairwise 200 100 0.2 \
                --make-bed --out results/tmp/G2G_QC_PCA_tmp
                ./plink2 --bfile results/tmp/G2G_QC_PCA_tmp --extract results/tmp/G2G_QC_PCA_tmp.prune.in \
                --make-bed --out results/tmp/G2G_QC_PCA

                ./plink2 --vcf {input.vcf} --maf {params.MAF} \
                --geno {params.missing} --mind {params.missing} --hwe {params.HWE} \
                --make-bed --out results/tmp/G2G_QC --threads {threads}

                ./plink2 --vcf {input.vcf} --maf {params.MAF} \
                --geno {params.missing} --mind {params.missing} --hwe {params.HWE} \
                --export vcf bgz --out results/tmp/G2G_QC --threads {threads}

                bcftools index --threads {threads} results/tmp/G2G_QC.vcf.gz
                bcftools query -f '%ID\n' results/tmp/G2G_QC.vcf.gz > results/tmp/G2G_QC.variants
                bcftools query -f '%ID %CHROM %POS\n' results/tmp/G2G_QC.vcf.gz > results/tmp/G2G_QC.info

	       """
else:
    print('Invalid Arugment: excl_chr6. Please specify wheter to exclude chr6')
    sys.exit()


if config["N_PC"] > 0:
  rule host_PCA:
      input:
          bed="results/tmp/G2G_QC_PCA.bed",
          bim="results/tmp/G2G_QC_PCA.bim",
          fam="results/tmp/G2G_QC_PCA.fam"
      output:
          eigenval="results/tmp/G2G_QC_PCA.eigenval",
          eigenvec="results/tmp/G2G_QC_PCA.eigenvec"
      params:
          N_PC=config["N_PC"]
      shell:
          "cd /home/; ./gcta64  --threads {threads} --bfile results/tmp/G2G_QC_PCA  --autosome  --make-grm  --out results/tmp/G2G_QC_PCA; ./gcta64 --threads {threads} --grm results/tmp/G2G_QC_PCA --pca {params.N_PC} --out results/tmp/G2G_QC_PCA"
else:
  shell("mkdir -p results/tmp/; touch results/tmp/G2G_QC_PCA.eigenvec")

if config["pPCA"] is True:
  rule pathogen_pPCA: 
    input:
        tbl=expand(config["pathogen_tbl_dir"]+"{gene}.txt",gene=genes_to_run),
        nw=config["nw_file"]
    output:
        "results/tmp/{gene}/pPCA_{gene}.txt"
    threads: 1
    params:
        N_pPC=config["N_pPC"]
    shell:
        "Rscript ./scripts/Pathogen_pPCA.R {input.tbl} {input.nw} {params.N_pPC} {output}"
else:
  rule pathogen_PCA: 
    input:
        tbl=expand(config["pathogen_tbl_dir"]+"{gene}.txt",gene=genes_to_run)
    output:
        "results/tmp/{gene}/pPCA_{gene}.txt"
    threads: 1
    params:
        N_pPC=config["N_pPC"]
    shell:
        "Rscript ./scripts/Pathogen_PCA.R {input.tbl} {params.N_pPC} {output}"

rule merge_covar:
    input:
        pPCA="results/tmp/{gene}/pPCA_{gene}.txt",
        PCA="results/tmp/G2G_QC_PCA.eigenvec",
        covar_file=config["covar_file"]
    output:
        merged_covar="results/tmp/{gene}/merged_covar_{gene}.txt",
        merged_covar_plink="results/tmp/{gene}/merged_covar_{gene}_plink.txt"
    threads: 1
    shell:
        "Rscript ./scripts/Merge_Covars.R {input.covar_file} {input.pPCA} {input.PCA} {output.merged_covar}"

rule pathogen_freq_filter:
    input:
        tbl=config["pathogen_tbl_dir"]+"{gene}.txt",
        info=config["pathogen_tbl_dir"]+"{gene}.info",
        covar_file="results/tmp/{gene}/merged_covar_{gene}.txt"
    output:
        tbl="results/tmp/{gene}/{gene}_QC.txt",
        tbl_plink="results/tmp/{gene}/{gene}_QC_plink.txt",
        variants="results/tmp/{gene}/{gene}_QC.variants",
        info="results/tmp/{gene}/{gene}_QC.info"
    threads: 1
    params:
        pathogen_MAC=config["pathogen_MAC"],
        pathogen_missing=config["pathogen_missing"]
    shell:
        "Rscript ./scripts/Pathogen_QC.R {input.covar_file} {input.tbl} {input.info} {params.pathogen_MAC} {params.pathogen_missing} {output.tbl} {output.variants} {output.info}"

if config["tool"] == 'SAIGE':
  rule G2G_Saige:
    input:
        aa_tbl="results/tmp/{gene}/{gene}_QC.txt",
        patho_variants="results/tmp/{gene}/{gene}_QC.variants",
        bed="results/tmp/G2G_QC.bed",
        bim="results/tmp/G2G_QC.bim",
        fam="results/tmp/G2G_QC.fam",
        covar="results/tmp/{gene}/merged_covar_{gene}.txt",
        vcf='results/tmp/G2G_QC.vcf.gz',
        variants='results/tmp/G2G_QC.variants'
    params:
        host_geno="results/tmp/G2G_QC"
    output:
        "results/{gene}/log.out"
    benchmark:
        "benchmarks/{gene}/SAIGE.benchmark.txt"
    container: 
        "docker://wzhou88/saige:0.44.2"
    threads: 22
    shell:
        """ 
            mkdir -p ./results/tmp/SAIGE/
            touch  ./results/{wildcards.gene}/log.out
            
            #Read in Pathogen variants for each gene to loop through 
            readarray -t patho_variants < <(cat ./results/tmp/{wildcards.gene}/{wildcards.gene}_QC.variants)
            
            for cur_var in "${{patho_variants[@]}}"
            do
                echo "Running SAIGE on: "$cur_var
                step1_fitNULLGLMM.R \
                --plinkFile=./results/tmp/G2G_QC \
                --phenoFile=./results/tmp/{wildcards.gene}/{wildcards.gene}_QC.txt\
                --phenoCol=$cur_var \
                --covarColList=$(sed 's/ /,/g' ./results/tmp/{wildcards.gene}/merged_covar_{wildcards.gene}.txt | head -n 1 | sed 's/IID,//' | sed 's/PID,//') \
                --sampleIDColinphenoFile=IID \
                --traitType=binary        \
                --outputPrefix=./results/tmp/SAIGE/$cur_var \
                --nThreads={threads} \
                --LOCO=FALSE 2> "./results/tmp/SAIGE/"$cur_var".NULLGLMM.error" > "./results/tmp/SAIGE/"$cur_var".NULLGLMM.log" || true
                if [ $(grep -v 'Loading required package:' ./results/tmp/SAIGE/$cur_var.NULLGLMM.error | wc -l) -eq 0 ]
                then
                #Print out chromosomes
                awk '{{print $1}}' {input.bim} | uniq > ./results/tmp/G2G_QC.chr
                readarray -t chr < <(cat ./results/tmp/G2G_QC.chr)
                    for chr in "${{chr[@]}}"
                    do
                        step2_SPAtests.R \
                        --vcfFile=./results/tmp/G2G_QC.vcf.gz \
                        --vcfField=GT \
                        --LOCO=FALSE \
                        --chrom=$chr \
                        --minMAF={config[host_MAF]} \
                        --minMAC=3 \
                        --IsDropMissingDosages=TRUE \
                        --GMMATmodelFile="./results/tmp/SAIGE/"$cur_var".rda" \
                        --varianceRatioFile="./results/tmp/SAIGE/"$cur_var".varianceRatio.txt" \
                        --SAIGEOutputFile="./results/tmp/SAIGE/"$cur_var".chr"$chr".txt" \
                        --numLinesOutput=2147483647 \
                        --IsOutputAFinCaseCtrl=TRUE 2> "./results/tmp/SAIGE/"$cur_var".SPAtest.error" > "./results/tmp/SAIGE/"$cur_var".SPAtest.log" || true &
                    done
                    wait
                    if [ -f "./results/tmp/SAIGE/"$cur_var".chr1.txt" ] 
                    then
                        head -n 1 "./results/tmp/SAIGE/"$cur_var".chr1.txt" > "./results/{wildcards.gene}/"$cur_var".allchr.txt"
                        for chr in $(seq 1 1 22)
                        do
                            grep -v 'CHR' "./results/tmp/SAIGE/"$cur_var".chr"$chr".txt" \
                            >> "./results/{wildcards.gene}/"$cur_var".allchr.txt"
                            rm "./results/tmp/SAIGE/"$cur_var".chr"$chr".txt"
                        done
                    else
                        echo 'step2_SPAtests error:'$cur_var >> "./results/{wildcards.gene}/log.out"
                    fi
                else
                    echo 'step1_fitNULLGLMM warning:'$cur_var >> "./results/{wildcards.gene}/log.out"

                fi
            done
        """
elif config["tool"] == 'PLINK':
  rule G2G_PLINK:
    input:
        aa_tbl="results/tmp/{gene}/{gene}_QC_plink.txt",
        patho_variants="results/tmp/{gene}/{gene}_QC.variants",
        bed="results/tmp/G2G_QC.bed",
        bim="results/tmp/G2G_QC.bim",
        fam="results/tmp/G2G_QC.fam",
        covar="results/tmp/{gene}/merged_covar_{gene}_plink.txt",
        variants='results/tmp/G2G_QC.variants'
    params:
        host_geno="results/tmp/G2G_QC"
    output:
        "results/{gene}/log.out"
    benchmark:
        "benchmarks/{gene}/plink.benchmark.txt"
    container: 
        "docker://zmxu/plink2"
    threads: 22
    shell:
        """ 
            mkdir -p ./results/tmp/PLINK/

            #Read in Pathogen variants for each gene to loop through 
            readarray -t patho_variants < <(cat ./results/tmp/{wildcards.gene}/{wildcards.gene}_QC.variants)
            
            i=2
            for cur_var in "${{patho_variants[@]}}"
            do
                /plink2 --threads 22 --bfile {params.host_geno} --logistic hide-covar --covar-variance-standardize --1 --pheno {input.aa_tbl} --pheno-col-nums $i \
                --covar {input.covar} --out ./results/{wildcards.gene}/$cur_var >> ./results/{wildcards.gene}/log.out 2>&1
                
                mv ./results/{wildcards.gene}/$cur_var"."$cur_var".glm.logistic.hybrid" "./results/{wildcards.gene}/"$cur_var".allchr.txt"
                
                i=$((i+1))
            done

        """
elif config["tool"] == 'regenie':
  rule G2G_Regenie_Step1:
    input:
        aa_tbl="results/tmp/{gene}/{gene}_QC_plink.txt",
        patho_variants="results/tmp/{gene}/{gene}_QC.variants",
        bed="results/tmp/G2G_QC.bed",
        bim="results/tmp/G2G_QC.bim",
        fam="results/tmp/G2G_QC.fam",
        covar="results/tmp/{gene}/merged_covar_{gene}_plink.txt",
        vcf='results/tmp/G2G_QC.vcf.gz',
        variants='results/tmp/G2G_QC.variants'
    output:
        "results/{gene}/tmp/fit_bin_l1_pred.list"
    benchmark:
        "benchmarks/{gene}/regenie_step1.benchmark.txt"
    container: 
        "docker://zmxu/regenie"
    shell:
        """
            export LC_ALL="C"
            export LANGUAGE=""
            
            mkdir -p ./results/tmp/regenie/

            #Create Pheno and Covar file
            {{ echo "FID"; printf "0\n%.0s" $(seq $(($(wc -l < {input.covar}) - 1))); }} > results/tmp/{wildcards.gene}/tmp.txt
            paste results/tmp/{wildcards.gene}/tmp.txt {input.covar} > results/tmp/{wildcards.gene}/merged_covar_{wildcards.gene}.regenie.txt
            paste results/tmp/{wildcards.gene}/tmp.txt {input.aa_tbl} > results/tmp/{wildcards.gene}/{wildcards.gene}_QC.regenie.txt
            rm results/tmp/{wildcards.gene}/tmp.txt
            
            regenie \
            --step 1 \
            --bt --lowmem	\
            --bed ./results/tmp/G2G_QC \
            --covarFile ./results/tmp/{wildcards.gene}/merged_covar_{wildcards.gene}.regenie.txt \
            --phenoFile ./results/tmp/{wildcards.gene}/{wildcards.gene}_QC.regenie.txt \
            --bsize 1000 \
            --threads	{threads} \
            --out ./results/{wildcards.gene}/tmp/fit_bin_l1
              
        """
  os.system("mkdir -p results/tmp/")
  os.system("zcat <"+ config["host_VCF"]+" | grep -v '#' | awk {'print $1'} > results/tmp/G2G_QC.chr")
  info_file = pd.read_csv("results/tmp/G2G_QC.chr", sep='\t')
  all_chr = info_file[info_file.columns[0]].unique()
      
  rule convert_bgen:
      input:
        bed="results/tmp/G2G_QC.bed",
        bim="results/tmp/G2G_QC.bim",
        fam="results/tmp/G2G_QC.fam"
      output:
        bgen = "results/tmp/G2G_QC_{chr}.bgen",
        sample = "results/tmp/G2G_QC_{chr}.sample"
      container: 
        "docker://zmxu/plink2"
      shell:
       """
            #Get the chromosome information
            all_chr=$(awk '{{print $1}}' results/tmp/G2G_QC.chr | uniq)
            
            # Extract chromosome numbers
            chromosomes=()
            while read -r line; do
              chromosome=$(echo "$line")
              chromosomes+=("$chromosome")
            done <<< "$all_chr"

            for chromosome in "${{chromosomes[@]}}"; do
              /plink2 --bed {input.bed} --bim {input.bim} --fam {input.fam} --chr $chromosome --export bgen-1.2 'bits=8' --out results/tmp/G2G_QC_$chromosome
            done
            
       """
  
  rule G2G_Regenie_Step2:
    input:
        aa_tbl="results/tmp/{gene}/{gene}_QC_plink.txt",
        patho_variants="results/tmp/{gene}/{gene}_QC.variants",
        bgen = "results/tmp/G2G_QC_{chr}.bgen",
        sample = "results/tmp/G2G_QC_{chr}.sample",
        bim="results/tmp/G2G_QC.bim",
        covar="results/tmp/{gene}/merged_covar_{gene}_plink.txt",
        vcf='results/tmp/G2G_QC.vcf.gz',
        variants='results/tmp/G2G_QC.variants',
        step1="results/{gene}/tmp/fit_bin_l1_pred.list"
    output:
        "results/{gene}/bin_out_spa_{chr}.log"
    benchmark:
        "benchmarks/{gene}/{chr}.regenie_step2.benchmark.txt"
    threads:
        1
    container: 
        "docker://zmxu/regenie"
    shell:
        """
            regenie \
            --step 2 \
            --bgen {input.bgen} \
            --sample {input.sample} \
            --covarFile ./results/tmp/{wildcards.gene}/merged_covar_{wildcards.gene}.regenie.txt \
            --phenoFile ./results/tmp/{wildcards.gene}/{wildcards.gene}_QC.regenie.txt \
            --bsize 1000 \
            --bt \
            --spa \
            --pThresh 0.01 \
            --pred {input.step1} \
            --out ./results/{wildcards.gene}/bin_out_spa_{wildcards.chr} \
            --threads	1
            
        """
  rule G2G_Regenie_Step2_Merge:
    input:
      lambda wildcards: expand("results/{gene}/bin_out_spa_{chr}.log",chr = all_chr,gene = wildcards.gene)
    output:
      log ="results/{gene}/log.out"
    shell:
      """
        #Get the chromosome information
        all_chr=$(awk '{{print $1}}' results/tmp/G2G_QC.chr | uniq)
            
        # Extract chromosome numbers
        chromosomes=()
        while read -r line; do
          chromosome=$(echo "$line")
          chromosomes+=("$chromosome")
        done <<< "$all_chr"

        #Read in Pathogen variants for each gene to loop through 
        readarray -t patho_variants < <(cat ./results/tmp/{wildcards.gene}/{wildcards.gene}_QC.variants)
            
        for cur_var in "${{patho_variants[@]}}";
        do
          declare -i cnt=1
          
          for chromosome in "${{chromosomes[@]}}";
          do
            if [ $cnt -eq 1 ]
            then
              head -n 1 ./results/{wildcards.gene}/bin_out_spa_$chromosome"_"$cur_var.regenie > "./results/{wildcards.gene}/"$cur_var".allchr.txt"
            fi
              
            cat ./results/{wildcards.gene}/bin_out_spa_$chromosome"_"$cur_var.regenie | grep -v 'CHROM' >> "./results/{wildcards.gene}/"$cur_var".allchr.txt"
            rm ./results/{wildcards.gene}/bin_out_spa_$chromosome"_"$cur_var.regenie
            
            cnt=$(( cnt + 1 ))
          done
        done
        cat ./results/{wildcards.gene}/bin_out_spa_*.log >> ./results/{wildcards.gene}/log.out
      """
        
