configfile: "../config/config.yaml"
genes_to_run=config["genes"].split(',')

#Write out Tree path
tree_file = open("../results/tree_path.txt","w")
tree_file.write(config["nw_file"]+'\n') 
tree_file.close()

rule all:
    input:
        '../results/tmp/G2G_QC.variants',
        "../results/tmp/G2G_QC.eigenval"
        #"../results/G2G_Results.bmat"
        #expand("../results/tmp/Gene_{gene}/AA_Tbl_Gene_{gene}_QC.txt",gene=genes_to_run)
rule summarize:
    input:
        tbl=expand("../results/Gene_{gene}/log.out",gene=genes_to_run),
        host_variants='../results/tmp/G2G_QC.variants',
        host_info='../results/tmp/G2G_QC.info'
    output:
        "../results/G2G_Results.bmat"
    conda:
        "envs/QC.yaml"
    threads: 1
    shell:
        "Rscript ./scripts/Summarize_G2G.R {input.tbl} {input.host_variants} {output}"

if config["pathogen_input"] == 'fasta':
    print('Pathogen FASTA input')
    rule expand_fasta:
        input:
            seq=config["pathogen_fasta"],
            ref=config["pathogen_ref"],
            gff=config["pathogen_gff"]
        output:
            "../results/tmp/pathogen.expanded.fasta"
        conda:
            "envs/QC.yaml"
        threads: 20
        shell:
            """
            Rscript ./scripts/Expand_FASTA.R {input.seq} {output} {threads}
            """
            
    rule nextalign:
        input:
            fasta="../results/tmp/pathogen.expanded.fasta",
            ref=config["pathogen_ref"],
            gff=config["pathogen_gff"]
        output:
            expand("../results/FASTA_AA/pathogen.expanded.gene.{gene}.fasta",gene=genes_to_run)
        conda:
            "envs/QC.yaml"
        threads: 1
        shell:
            """
                nextalign --sequences=../results/tmp/pathogen.expanded.fasta \
                --reference={input.ref} \
                --genemap={input.gff} \
                --genes {config[genes]} \
                --output-dir=../results/FASTA_AA/ 2> ../results/FASTA_AA/nextalign.log
            """

    rule make_aa_tbl:
        input:
            fasta="../results/FASTA_AA/pathogen.expanded.gene.{gene}.fasta",
            covar=config["covar_file"]
        output:
            tbl=config["pathogen_tbl_dir"]+"AA_Tbl_Gene_{gene}.txt",
            info=config["pathogen_tbl_dir"]+"AA_Tbl_Gene_{gene}.info"
        conda:
            "envs/QC.yaml"
        threads: 1
        shell:
            """
                Rscript ./scripts/FASTA_to_Tbl.R {input.fasta} {input.covar} {output.tbl} {output.info}
            """
            
elif config["pathogen_input"] == 'aa_tbl': 
        import os.path

        print('Pathogen AA Table Input')
        for gene in genes_to_run:
            cur_path=config["pathogen_tbl_dir"]+"AA_Tbl_Gene_"+gene+".txt"
            if not os.path.isfile(cur_path):
                 print('Invalid Arugment: pathogen_tbl_dir')
                 sys.exit()
else:
    print('Invalid Arugment: pathogen_input. Please specify type of pathogen file input (fasta or aa_tbl)')
    sys.exit()


if config["excl_chr6"] is True:
    rule host_QC_no_chr6:
        input:
            vcf=config["host_VCF"],
            covar_file=config["covar_file"]
        output:
            bed="../results/tmp/G2G_QC.bed",
            bim="../results/tmp/G2G_QC.bim",
            fam="../results/tmp/G2G_QC.fam",
            bed_PCA="../results/tmp/G2G_QC_PCA.bed",
            bim_PCA="../results/tmp/G2G_QC_PCA.bim",
            fam_PCA="../results/tmp/G2G_QC_PCA.fam",
            vcf='../results/tmp/G2G_QC.vcf.gz',
            variants='../results/tmp/G2G_QC.variants',
            info='../results/tmp/G2G_QC.info'
        params:
            MAF=config["host_MAF"],
            missing=config["host_missing"],
            HWE=config["host_HWE"],
            excl_chr6=bool(config["excl_chr6"])
        conda:
            "envs/QC.yaml"
        shell:
            """
                plink2 --vcf {input.vcf} --keep {input.covar_file} --maf {params.MAF} \
                --not-chr 6 --geno {params.missing} --mind {params.missing} --hwe {params.HWE} \
                --make-bed --out ../results/tmp/G2G_QC_PCA --threads {threads}
                
                plink2 --vcf {input.vcf} --keep {input.covar_file} --maf {params.MAF} \
                --geno {params.missing} --mind {params.missing} --hwe {params.HWE} \
                --make-bed --out ../results/tmp/G2G_QC --threads {threads}

                
                plink2 --vcf {input.vcf} --keep {input.covar_file} --maf {params.MAF} \
                --geno {params.missing} --mind {params.missing} --hwe {params.HWE} \
                --export vcf bgz --out ../results/tmp/G2G_QC --threads {threads}

                bcftools index --threads {threads} ../results/tmp/G2G_QC.vcf.gz
                bcftools query -f '%ID\n' ../results/tmp/G2G_QC.vcf.gz > ../results/tmp/G2G_QC.variants
                bcftools query -f '%ID %CHROM %POS\n' ../results/tmp/G2G_QC.vcf.gz > ../results/tmp/G2G_QC.info

	        """
elif config["excl_chr6"] is False:
    rule host_QC:
        input:
            vcf=config["host_VCF"],
            covar_file=config["covar_file"]
        output:
            bed="../results/tmp/G2G_QC.bed",
            bim="../results/tmp/G2G_QC.bim",
            fam="../results/tmp/G2G_QC.fam",
            vcf='../results/tmp/G2G_QC.vcf.gz',
            variants='../results/tmp/G2G_QC.variants',
            info='../results/tmp/G2G_QC.info'
        params:
            MAF=config["host_MAF"],
            missing=config["host_missing"],
            HWE=config["host_HWE"],
            excl_chr6=bool(config["excl_chr6"])
        conda:
            "envs/QC.yaml"
        shell:
            """
                plink2 --vcf {input.vcf} --keep {input.covar_file} --maf {params.MAF} \
                --geno {params.missing} --mind {params.missing} --hwe {params.HWE} \
                --make-bed --out ../results/tmp/G2G_QC_PCA --threads {threads}
                
                plink2 --vcf {input.vcf} --keep {input.covar_file} --maf {params.MAF} \
                --geno {params.missing} --mind {params.missing} --hwe {params.HWE} \
                --make-bed --out ../results/tmp/G2G_QC --threads {threads}

                plink2 --vcf {input.vcf} --keep {input.covar_file} --maf {params.MAF} \
                --geno {params.missing} --mind {params.missing} --hwe {params.HWE} \
                --export vcf bgz --out ../results/tmp/G2G_QC --threads {threads}

                bcftools index --threads {threads} ../results/tmp/G2G_QC.vcf.gz
                bcftools query -f '%ID\n' ../results/tmp/G2G_QC.vcf.gz > ../results/tmp/G2G_QC.variants
                bcftools query -f '%ID %CHROM %POS\n' ../results/tmp/G2G_QC.vcf.gz > ../results/tmp/G2G_QC.info

	       """
else:
    print('Invalid Arugment: excl_chr6. Please specify wheter to exclude chr6')
    sys.exit()

rule host_PCA:
    input:
        bed="../results/tmp/G2G_QC_PCA.bed",
        bim="../results/tmp/G2G_QC_PCA.bim",
        fam="../results/tmp/G2G_QC_PCA.fam"
    output:
        eigenval="../results/tmp/G2G_QC.eigenval",
        eigenvec="../results/tmp/G2G_QC.eigenvec"
    params:
        N_PC=config["N_PC"]
    conda:
        "envs/QC.yaml"
    shell:
        "gcta64  --threads {threads} --bfile ../results/tmp/G2G_QC  --autosome  --make-grm  --out ../results/tmp/G2G_QC; gcta64 --threads {threads} --grm ../results/tmp/G2G_QC --pca {params.N_PC} --out ../results/tmp/G2G_QC"


rule pathogen_pPCA: 
    input:
        tbl=expand(config["pathogen_tbl_dir"]+"AA_Tbl_Gene_{gene}.txt",gene=genes_to_run),
        nw=config["nw_file"]
    output:
        "../results/tmp/Gene_{gene}/pPCA_gene_{gene}.txt"
    threads: 1
    params:
        N_pPC=config["N_pPC"]
    conda:
        "envs/QC.yaml"
    shell:
        "Rscript ./scripts/Pathogen_pPCA.R {input.tbl} {input.nw} {params.N_pPC} {output}"

rule merge_covar:
    input:
        pPCA="../results/tmp/Gene_{gene}/pPCA_gene_{gene}.txt",
        PCA="../results/tmp/G2G_QC.eigenvec",
        covar_file=config["covar_file"]
    output:
        merged_covar="../results/tmp/Gene_{gene}/merged_covar_gene_{gene}.txt"
    threads: 1
    conda:
        "envs/QC.yaml"
    shell:
        "Rscript ./scripts/Merge_Covars.R {input.covar_file} {input.pPCA} {input.PCA} {output.merged_covar}"

rule pathogen_QC:
    input:
        tbl=config["pathogen_tbl_dir"]+"AA_Tbl_Gene_{gene}.txt",
        info=config["pathogen_tbl_dir"]+"AA_Tbl_Gene_{gene}.info",
        covar_file="../results/tmp/Gene_{gene}/merged_covar_gene_{gene}.txt"
    output:
        tbl="../results/tmp/Gene_{gene}/AA_Tbl_Gene_{gene}_QC.txt",
        variants="../results/tmp/Gene_{gene}/AA_Tbl_Gene_{gene}_QC.variants",
        info="../results/tmp/Gene_{gene}/AA_Tbl_Gene_{gene}_QC.info"
    threads: 1
    params:
        pathogen_MAC=config["pathogen_MAC"],
        pathogen_missing=config["pathogen_missing"]
    conda:
        "envs/QC.yaml"
    shell:
        "Rscript ./scripts/Pathogen_QC.R {input.covar_file} {input.tbl} {input.info} {params.pathogen_MAC} {params.pathogen_missing} {output.tbl} {output.variants} {output.info}"

rule G2G_Saige:
    input:
        aa_tbl="../results/tmp/Gene_{gene}/AA_Tbl_Gene_{gene}_QC.txt",
        patho_variants="../results/tmp/Gene_{gene}/AA_Tbl_Gene_{gene}_QC.variants",
        bed="../results/tmp/G2G_QC.bed",
        bim="../results/tmp/G2G_QC.bim",
        fam="../results/tmp/G2G_QC.fam",
        covar="../results/tmp/Gene_{gene}/merged_covar_gene_{gene}.txt",
        vcf='../results/tmp/G2G_QC.vcf.gz',
        variants='../results/tmp/G2G_QC.variants'
    params:
        host_geno="../results/tmp/G2G_QC"
    output:
        "../results/Gene_{gene}/log.out"
    container: 
        "docker://wzhou88/saige:0.44.2"
    threads: 22
    shell:
        """ 
            mkdir -p /results/tmp/SAIGE/
            touch  /results/Gene_{wildcards.gene}/log.out
            
            #Read in Pathogen variants for each gene to loop through 
            readarray -t patho_variants < <(cat /results/tmp/Gene_{wildcards.gene}/AA_Tbl_Gene_{wildcards.gene}_QC.variants)
            
            for cur_var in "${{patho_variants[@]}}"
            do
                echo "Running SAIGE on: "$cur_var
                step1_fitNULLGLMM.R \
                --plinkFile=/results/tmp/G2G_QC \
                --phenoFile=/results/tmp/Gene_{wildcards.gene}/AA_Tbl_Gene_{wildcards.gene}_QC.txt\
                --phenoCol=$cur_var \
                --covarColList=$(sed 's/ /,/g' /results/tmp/Gene_{wildcards.gene}/merged_covar_gene_{wildcards.gene}.txt | head -n 1 | sed 's/IID,//' | sed 's/PID,//') \
                --sampleIDColinphenoFile=IID \
                --traitType=binary        \
                --outputPrefix=/results/tmp/SAIGE/$cur_var \
                --nThreads={threads} \
                --LOCO=FALSE 2> "/results/tmp/SAIGE/"$cur_var".NULLGLMM.error" > "/results/tmp/SAIGE/"$cur_var".NULLGLMM.log" || true
                if [ $(grep -v 'Loading required package:' /results/tmp/SAIGE/$cur_var.NULLGLMM.error | wc -l) -eq 0 ]
                then 
                    for chr in $(seq 1 1 22)
                    do
                        step2_SPAtests.R \
                        --vcfFile=/results/tmp/G2G_QC.vcf.gz \
                        --vcfField=GT \
                        --LOCO=FALSE \
                        --chrom=$chr \
                        --minMAF={config[host_MAF]} \
                        --minMAC=3 \
                        --IsDropMissingDosages=TRUE \
                        --GMMATmodelFile="/results/tmp/SAIGE/"$cur_var".rda" \
                        --varianceRatioFile="/results/tmp/SAIGE/"$cur_var".varianceRatio.txt" \
                        --SAIGEOutputFile="/results/tmp/SAIGE/"$cur_var".chr"$chr".txt" \
                        --numLinesOutput=2147483647 \
                        --IsOutputAFinCaseCtrl=TRUE 2> "/results/tmp/SAIGE/"$cur_var".SPAtest.error" > "/results/tmp/SAIGE/"$cur_var".SPAtest.log" || true &
                    done
                    wait
                    if [ -f "/results/tmp/SAIGE/"$cur_var".chr1.txt" ] 
                    then
                        head -n 1 "/results/tmp/SAIGE/"$cur_var".chr1.txt" > "/results/Gene_{wildcards.gene}/"$cur_var".allchr.txt"
                        for chr in $(seq 1 1 22)
                        do
                            grep -v 'CHR' "/results/tmp/SAIGE/"$cur_var".chr"$chr".txt" \
                            >> "/results/Gene_{wildcards.gene}/"$cur_var".allchr.txt"
                            rm "/results/tmp/SAIGE/"$cur_var".chr"$chr".txt"
                        done
                    else
                        echo 'step2_SPAtests error:'$cur_var >> "/results/Gene_{wildcards.gene}/log.out"
                    fi
                else
                    echo 'step1_fitNULLGLMM warning:'$cur_var >> "/results/Gene_{wildcards.gene}/log.out"

                fi
            done
        """
